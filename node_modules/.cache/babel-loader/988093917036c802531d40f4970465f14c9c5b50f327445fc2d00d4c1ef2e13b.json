{"ast":null,"code":"import hyphenate from \"./hyphenate-style-name\";\nimport validateKeyframesObject from \"./validate-keyframes-object\";\nexport function atomicSelector(id, pseudo) {\n  let selector = `.${id}`;\n  if (pseudo) {\n    selector += pseudo;\n  }\n  return selector;\n}\nexport function keyframesToBlock(keyframes) {\n  if (process.env.NODE_ENV !== \"production\") {\n    validateKeyframesObject(keyframes);\n  }\n  if (process.env.NODE_ENV !== \"production\" && typeof Object.getPrototypeOf(keyframes) !== \"undefined\") {\n    if (Object.getPrototypeOf(keyframes) !== Object.getPrototypeOf({})) {\n      // eslint-disable-next-line no-console\n      console.warn(\"Only plain objects should be used as animation values. Unexpectedly recieved:\", keyframes);\n    }\n  }\n  let result = \"\";\n  for (const animationState in keyframes) {\n    result += `${animationState}{${declarationsToBlock(keyframes[animationState])}}`;\n  }\n  return result;\n}\nexport function declarationsToBlock(style) {\n  let css = \"\";\n  for (const prop in style) {\n    const val = style[prop];\n    if (typeof val === \"string\" || typeof val === \"number\") {\n      css += `${hyphenate(prop)}:${val};`;\n    }\n  } // trim trailing semicolon\n\n  return css.slice(0, -1);\n}\nexport function keyframesBlockToRule(id, block) {\n  return `@keyframes ${id}{${block}}`;\n}\nexport function fontFaceBlockToRule(id, block) {\n  return `@font-face{font-family:${id};${block}}`;\n}\nexport function styleBlockToRule(selector, block) {\n  return `${selector}{${block}}`;\n}","map":{"version":3,"mappings":"AAEA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,uBAAP,MAAoC,6BAApC;AAEA,OAAO,SAASC,cAAT,CAAwBC,EAAxB,EAAoCC,MAApC,EAA4D;EACjE,IAAIC,QAAQ,GAAI,IAAGF,EAAG,EAAtB;EACA,IAAIC,MAAJ,EAAY;IACVC,QAAQ,IAAID,MAAZ;EACD;EACD,OAAOC,QAAP;AACD;AAED,OAAO,SAASC,gBAAT,CAA0BC,SAA1B,EAAiE;EACtE,2CAAa;IACXN,uBAAuB,CAACM,SAAD,CAAvB;EACD;EACD,IAAIC,yCAAW,OAAOC,MAAM,CAACC,cAAP,CAAsBH,SAAtB,CAAP,KAA4C,WAA3D,EAAwE;IACtE,IAAIE,MAAM,CAACC,cAAP,CAAsBH,SAAtB,MAAqCE,MAAM,CAACC,cAAP,CAAsB,EAAtB,CAAzC,EAAoE;MAClE;MACAC,OAAO,CAACC,IAAR,CACE,+EADF,EAEEL,SAFF;IAID;EACF;EACD,IAAIM,MAAM,GAAG,EAAb;EACA,KAAK,MAAMC,cAAX,IAA6BP,SAA7B,EAAwC;IACtCM,MAAM,IAAK,GAAEC,cAAe,IAAGC,mBAAmB,CAChDR,SAAS,CAACO,cAAD,CADuC,CAEhD,GAFF;EAGD;EACD,OAAOD,MAAP;AACD;AAED,OAAO,SAASE,mBAAT,CAA6BC,KAA7B,EAAiD;EACtD,IAAIC,GAAG,GAAG,EAAV;EACA,KAAK,MAAMC,IAAX,IAAmBF,KAAnB,EAA0B;IACxB,MAAMG,GAAG,GAAGH,KAAK,CAACE,IAAD,CAAjB;IACA,IAAI,OAAOC,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAA9C,EAAwD;MACtDF,GAAG,IAAK,GAAEjB,SAAS,CAACkB,IAAD,CAAO,IAAGC,GAAI,GAAjC;IACD;EACF,CAPqD,CAQtD;;EACA,OAAOF,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAP;AACD;AAED,OAAO,SAASC,oBAAT,CAA8BlB,EAA9B,EAA0CmB,KAA1C,EAAiE;EACtE,OAAQ,cAAanB,EAAG,IAAGmB,KAAM,GAAjC;AACD;AAED,OAAO,SAASC,mBAAT,CAA6BpB,EAA7B,EAAyCmB,KAAzC,EAAgE;EACrE,OAAQ,0BAAyBnB,EAAG,IAAGmB,KAAM,GAA7C;AACD;AAED,OAAO,SAASE,gBAAT,CAA0BnB,QAA1B,EAA4CiB,KAA5C,EAAmE;EACxE,OAAQ,GAAEjB,QAAS,IAAGiB,KAAM,GAA5B;AACD","names":["hyphenate","validateKeyframesObject","atomicSelector","id","pseudo","selector","keyframesToBlock","keyframes","process","Object","getPrototypeOf","console","warn","result","animationState","declarationsToBlock","style","css","prop","val","slice","keyframesBlockToRule","block","fontFaceBlockToRule","styleBlockToRule"],"sources":["D:\\opPortfolio-master\\node_modules\\styletron-engine-atomic\\dist-browser-esm\\src\\css.ts"],"sourcesContent":["declare var __DEV__: boolean;\n\nimport hyphenate from \"./hyphenate-style-name\";\nimport validateKeyframesObject from \"./validate-keyframes-object\";\n\nexport function atomicSelector(id: string, pseudo: string): string {\n  let selector = `.${id}`;\n  if (pseudo) {\n    selector += pseudo;\n  }\n  return selector;\n}\n\nexport function keyframesToBlock(keyframes: {[x: string]: any}): string {\n  if (__DEV__) {\n    validateKeyframesObject(keyframes);\n  }\n  if (__DEV__ && typeof Object.getPrototypeOf(keyframes) !== \"undefined\") {\n    if (Object.getPrototypeOf(keyframes) !== Object.getPrototypeOf({})) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"Only plain objects should be used as animation values. Unexpectedly recieved:\",\n        keyframes,\n      );\n    }\n  }\n  let result = \"\";\n  for (const animationState in keyframes) {\n    result += `${animationState}{${declarationsToBlock(\n      keyframes[animationState],\n    )}}`;\n  }\n  return result;\n}\n\nexport function declarationsToBlock(style: any): string {\n  let css = \"\";\n  for (const prop in style) {\n    const val = style[prop];\n    if (typeof val === \"string\" || typeof val === \"number\") {\n      css += `${hyphenate(prop)}:${val};`;\n    }\n  }\n  // trim trailing semicolon\n  return css.slice(0, -1);\n}\n\nexport function keyframesBlockToRule(id: string, block: string): string {\n  return `@keyframes ${id}{${block}}`;\n}\n\nexport function fontFaceBlockToRule(id: string, block: string): string {\n  return `@font-face{font-family:${id};${block}}`;\n}\n\nexport function styleBlockToRule(selector: string, block: string): string {\n  return `${selector}{${block}}`;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}